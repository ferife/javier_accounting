MS SQL Server Data Types
    bit                     - Stores 0 or 1 (can be used as boolean)
    smallint                - same as Postgres smallint
    int                     - same as Postgres int
    int with IDENTITY(S,I)  - To create an autoincrement field. S should be starting value that should increment by I
        - EXAMPLE: productid INT IDENTITY(2,1) starts at 2 and increments by 1
    money                   - Used to store currency data between -922,337,203,685,477.5808 and 922,337,203,685,477.5807
    float(n)                - This is used when more precision is required and can store floating precision number between -1.79E308 and 1.79E308
    char(n)                 - Stores strings of fixed length. Can store max of 8,000 chars
    varchar(n)              - Stores strings of variable length. Can store max of 8,000 chars.
    nchar(n)                - Fixed length unicode string up to 4,000 chars
    nvarchar(n)             - Variable length unicode string up to 4,000 chars. If you enter max instead of a number, the string is possibly infinite
    datetime                - Store date with time ranging from Jan 1, 1753 to Dec 31, 9999. Accuracy is 3.33 milliseconds
    date                    - Store date between Jan 1, 0001 and Dec 31, 9999. Default format is YYYY-MM-DD
    timestamp               - Store unique timestamp that reads internal clock and gets auto updated whenever the row is created or updated
    uniqueidentifier        - Stores 16 byte Globally Unique Identifier (GUID)
        - Often used for row ID



When selecting from a table, format the table name as schemaName.tableName

The F5 key can be used to execute

SELECT statements must always follow the same order. 
    SELECT
    FROM
    WHERE
    GROUP BY
    HAVING
    ORDER BY

Order in which computer reads SELECT statements is FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY
    This is why you can't use aliases in WHERE clauses. The computer hasn't read the alias assignation yet.

WHERE <columnName> IN (<list>);
    This will give all rows where <column> has any of the values in <list>

WHERE <columnName> BETWEEN <min> AND <max>;
    This will give all rows where <columnName> has <min> value, <max> value, or anything in between

If concantenating but not sure if a record contains NULL values, better to use CONCAT() instead of + operator

DAY() Gives the day number from a datetime value
    MONTH() and YEAR() work the same

SELECT CURRENT_TIMESTAMP; will give the current date and time

UNION combines two SELECT statements
    Combines data into new ROWS
    Number of columns from each table should be same
    Datatypes of corresponding columns selected should be same
    Remove duplicates by default (use UNION ALL to avoid this)

JOIN combines data from many tables based on a matched condition between them
    Combines data into new COLUMNS
    Number of columns from each table may be different
    Datatypes of corresponding columns selected may be different
    Does NOT remove duplicates by default

JOIN
    by default, same as INNER JOIN

SELECT t1.col1, t2.col2
FROM table1 t1
    INNER JOIN
table2 t2
ON col1 = col1; -- col1 on table1 matches col1 on table2



SELECT <columns> FROM <table> WHERE <x> IN (
    <SUBQUERY>
)
    Use = instead of IN when the subquery will only give one result

CONSTRAINT <pk> PRIMARY KEY (<column1>,<column2>,...)
CONSTRAINT <fk> FOREIGN KEY(<column>) REFERENCES <table>(<column>)

ALTER TABLE tableName ADD columnName columnInfo;     -- Adds columnName to tableName
ALTER TABLE tableName ALTER COLUMN columnName columnInfo;   -- Changes columnName to match columnInfo
ALTER TABLE tableName DROP COLUMN column1, column2, ...;

UPDATE tableName SET col1 = val1, col2 = val2,...
WHERE condition;    -- Changes all the appropriate values where the condition is met. If there is no WHERE statement, it will update all the rows

<columnName> INT IDENTITY(1,1) is the MSSQL equivalent to Postgres' <columnName> SERIAL

SAME AS POSTGRES
    SELECT
    WHERE
    Comparison operators (>,<,>=,<=,=)
    Arithmetic operators
        When using the division operator, ensure the denominator is NEVER 0
    Commenting
    AS (aliases)
    Concantenation
    AND/OR Logical operators
    LIKE operator
        % - Any character or characters (can be no characters, can be infinite characters)
        _ - Any ONE character
    ORDER BY
        Earlier column given has greater priority in order
    GROUP BY
    Aggregate Functions
        Aggregates cannot be used in WHERE clauses. Must use a subquery or HAVING instead of WHERE
        SUM()
        AVG()
        MIN()
        MAX()
    String Functions
        CONCAT()
        LEN()
        LEFT()
        RIGHT()
        SUBSTRING()
    INSERT INTO <table>() VALUES (),(),...
    DROP
    DELETE










